// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tracker.Models;

#nullable disable

namespace Tracker.Migrations
{
    [DbContext(typeof(TrackerContext))]
    [Migration("20230322213525_AddUserToRestaurant")]
    partial class AddUserToRestaurant
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tracker.Models.Alcohol", b =>
                {
                    b.Property<int>("AlcoholId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AlcoholAmount")
                        .HasColumnType("longtext");

                    b.Property<string>("AlcoholType")
                        .HasColumnType("longtext");

                    b.HasKey("AlcoholId");

                    b.ToTable("Alcohols");
                });

            modelBuilder.Entity("Tracker.Models.AlcoholOrder", b =>
                {
                    b.Property<int>("AlcoholOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AlcAndRestaurant")
                        .HasColumnType("longtext");

                    b.Property<int>("AlcoholId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("AlcoholOrderId");

                    b.HasIndex("AlcoholId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("AlcoholOrders");
                });

            modelBuilder.Entity("Tracker.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Tracker.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlcoholOrderId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryName")
                        .HasColumnType("longtext");

                    b.Property<int>("MeatOrderId")
                        .HasColumnType("int");

                    b.Property<int>("VegetableOrderId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Tracker.Models.Meat", b =>
                {
                    b.Property<int>("MeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MeatAmount")
                        .HasColumnType("longtext");

                    b.Property<string>("MeatType")
                        .HasColumnType("longtext");

                    b.HasKey("MeatId");

                    b.ToTable("Meats");
                });

            modelBuilder.Entity("Tracker.Models.MeatOrder", b =>
                {
                    b.Property<int>("MeatOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("MeatAndRestaurant")
                        .HasColumnType("longtext");

                    b.Property<int>("MeatId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("MeatOrderId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("MeatId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MeatOrders");
                });

            modelBuilder.Entity("Tracker.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Tracker.Models.Vegetable", b =>
                {
                    b.Property<int>("VegetableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("VegetableAmount")
                        .HasColumnType("longtext");

                    b.Property<string>("VegetableType")
                        .HasColumnType("longtext");

                    b.HasKey("VegetableId");

                    b.ToTable("Vegetables");
                });

            modelBuilder.Entity("Tracker.Models.VegetableOrder", b =>
                {
                    b.Property<int>("VegetableOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("VegAndRestaurant")
                        .HasColumnType("longtext");

                    b.Property<int>("VegetableId")
                        .HasColumnType("int");

                    b.HasKey("VegetableOrderId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("VegetableId");

                    b.ToTable("VegetableOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tracker.Models.AlcoholOrder", b =>
                {
                    b.HasOne("Tracker.Models.Alcohol", "Alcohol")
                        .WithMany("JoinAlcoholEntities")
                        .HasForeignKey("AlcoholId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracker.Models.Delivery", "Delivery")
                        .WithMany("JoinAlcoholEntities")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("Tracker.Models.Restaurant", "Restaurant")
                        .WithMany("JoinAlcoholEntities")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alcohol");

                    b.Navigation("Delivery");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Tracker.Models.MeatOrder", b =>
                {
                    b.HasOne("Tracker.Models.Delivery", "Delivery")
                        .WithMany("JoinMeatOrderEntities")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("Tracker.Models.Meat", "Meat")
                        .WithMany("JoinMeatOrderEntities")
                        .HasForeignKey("MeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracker.Models.Restaurant", "Restaurant")
                        .WithMany("JoinMeatOrderEntities")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Meat");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Tracker.Models.Restaurant", b =>
                {
                    b.HasOne("Tracker.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tracker.Models.VegetableOrder", b =>
                {
                    b.HasOne("Tracker.Models.Delivery", "Delivery")
                        .WithMany("JoinVegetableOrderEntities")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("Tracker.Models.Restaurant", "Restaurant")
                        .WithMany("JoinVegetableOrderEntities")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracker.Models.Vegetable", "Vegetable")
                        .WithMany("JoinVegetableOrderEntities")
                        .HasForeignKey("VegetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Restaurant");

                    b.Navigation("Vegetable");
                });

            modelBuilder.Entity("Tracker.Models.Alcohol", b =>
                {
                    b.Navigation("JoinAlcoholEntities");
                });

            modelBuilder.Entity("Tracker.Models.Delivery", b =>
                {
                    b.Navigation("JoinAlcoholEntities");

                    b.Navigation("JoinMeatOrderEntities");

                    b.Navigation("JoinVegetableOrderEntities");
                });

            modelBuilder.Entity("Tracker.Models.Meat", b =>
                {
                    b.Navigation("JoinMeatOrderEntities");
                });

            modelBuilder.Entity("Tracker.Models.Restaurant", b =>
                {
                    b.Navigation("JoinAlcoholEntities");

                    b.Navigation("JoinMeatOrderEntities");

                    b.Navigation("JoinVegetableOrderEntities");
                });

            modelBuilder.Entity("Tracker.Models.Vegetable", b =>
                {
                    b.Navigation("JoinVegetableOrderEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
